user  nginx;
worker_processes  1;

events {
    worker_connections  1024;
}

http {
    include       /etc/nginx/mime.types;

    default_type  application/octet-stream;

    upstream backend {
        server backend:8000;
    }
    upstream tournament {
        server tournament:8001;
    }

    sendfile        off;

    server {
        listen 3042 ssl;
        server_name localhost;

        ssl_certificate /etc/nginx/ssl/localhost.crt;
        ssl_certificate_key /etc/nginx/ssl/localhost.key;
        ssl_protocols       TLSv1.2 TLSv1.3;

        root /usr/share/nginx/html/Nginx/app;
        index index.html;

        location / {
            try_files $uri $uri/ /index.html;
        }

        # CORS Configuration for /users/
        location /users/ {
            proxy_pass http://backend;
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;

            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection "upgrade";
            proxy_read_timeout 86400;
            proxy_send_timeout 86400;

            # Add CORS headers
            add_header 'Access-Control-Allow-Origin' '*' always;  # Use '*' for all origins or specify 'http://localhost:3000'
            add_header 'Access-Control-Allow-Methods' 'GET, POST, PUT, DELETE, OPTIONS' always;
            add_header 'Access-Control-Allow-Headers' 'Authorization, Content-Type, X-Requested-With' always;
            add_header 'Access-Control-Allow-Credentials' 'true' always;

            # Handle preflight OPTIONS requests
            if ($request_method = OPTIONS) {
                add_header 'Access-Control-Allow-Origin' '*' always;
                add_header 'Access-Control-Allow-Methods' 'GET, POST, PUT, DELETE, OPTIONS' always;
                add_header 'Access-Control-Allow-Headers' 'Authorization, Content-Type, X-Requested-With' always;
                add_header 'Access-Control-Allow-Credentials' 'true' always;
                return 204;
            }
        }

        # CORS Configuration for /tournament/
        location /tournament/ {
            proxy_pass http://tournament;
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection "upgrade";
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;

            # Add CORS headers
            add_header 'Access-Control-Allow-Origin' '*' always;  # Adjust origin as needed
            add_header 'Access-Control-Allow-Methods' 'GET, POST, PUT, DELETE, OPTIONS' always;
            add_header 'Access-Control-Allow-Headers' 'Authorization, Content-Type, X-Requested-With' always;
            add_header 'Access-Control-Allow-Credentials' 'true' always;

            if ($request_method = OPTIONS) {
                add_header 'Access-Control-Allow-Origin' '*' always;
                add_header 'Access-Control-Allow-Methods' 'GET, POST, PUT, DELETE, OPTIONS' always;
                add_header 'Access-Control-Allow-Headers' 'Authorization, Content-Type, X-Requested-With' always;
                add_header 'Access-Control-Allow-Credentials' 'true' always;
                return 204;
            }
        }

        # CORS Configuration for /ws/
        location /ws/ {
            proxy_pass http://backend;
            proxy_http_version 1.1;
            proxy_set_header Upgrade $http_upgrade;
            proxy_set_header Connection "Upgrade";
            proxy_set_header Host $host;
            proxy_set_header X-Real-IP $remote_addr;
            proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
            proxy_set_header X-Forwarded-Proto $scheme;
            proxy_read_timeout 86400;
            proxy_send_timeout 86400;

            # Add CORS headers
            add_header 'Access-Control-Allow-Origin' '*' always;  # Adjust origin as needed
            add_header 'Access-Control-Allow-Methods' 'GET, POST, PUT, DELETE, OPTIONS' always;
            add_header 'Access-Control-Allow-Headers' 'Authorization, Content-Type, X-Requested-With' always;
            add_header 'Access-Control-Allow-Credentials' 'true' always;

            if ($request_method = OPTIONS) {
                add_header 'Access-Control-Allow-Origin' '*' always;
                add_header 'Access-Control-Allow-Methods' 'GET, POST, PUT, DELETE, OPTIONS' always;
                add_header 'Access-Control-Allow-Headers' 'Authorization, Content-Type, X-Requested-With' always;
                add_header 'Access-Control-Allow-Credentials' 'true' always;
                return 204;
            }
        }

		location /api/ {
    		proxy_pass http://tournament;  # Backend de Django
    		proxy_set_header Host $host;
    		proxy_set_header X-Real-IP $remote_addr;
    		proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
    		proxy_set_header X-Forwarded-Proto $scheme;

   	 		proxy_http_version 1.1;
    		proxy_set_header Upgrade $http_upgrade;
    		proxy_set_header Connection "upgrade";
    		proxy_read_timeout 86400;
    		proxy_send_timeout 86400;

    		# Agregar encabezados CORS si es necesario
    		add_header 'Access-Control-Allow-Origin' '*' always;
    		add_header 'Access-Control-Allow-Methods' 'GET, POST, PUT, DELETE, OPTIONS' always;
    		add_header 'Access-Control-Allow-Headers' 'Authorization, Content-Type, X-Requested-With' always;
    		add_header 'Access-Control-Allow-Credentials' 'true' always;
		}


        location ~* \.(?:css|js|jpg|jpeg|png|gif|ico|svg|woff|woff2|ttf|eot)$ {
            expires 0;
            add_header Cache-Control "no-cache, no-store, must-revalidate";
        }

        error_page 404 /index.html;
    }
}
# user  nginx;
# worker_processes  1;

# events {
#     worker_connections  1024;
# }

# http {
# 	include       /etc/nginx/mime.types;
# 	default_type  application/octet-stream;

# 	sendfile        off;
# 	keepalive_timeout  65;

# 	server {
# 		listen 3042;
# 		server_name your_domain.com;

# 		root /usr/share/nginx/html/Nginx/app;
# 		index index.html;

# 		location / {
# 			try_files $uri $uri/ /index.html;
# 		}

# 		location ~* \.(?:css|js|jpg|jpeg|png|gif|ico|svg|woff|woff2|ttf|eot)$ {
# 			expires 0;
# 			# add_header Cache-Control "public";
# 			add_header Cache-Control "no-cache, no-store, must-revalidate";
# 			# Pragma "no-cache";
# 		}
		
# 		error_page 404 /index.html;
# 	}


#}